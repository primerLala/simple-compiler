package com.zll.scanner;/* The following code was generated by JFlex 1.4.3 on 14-6-7 下午2:07 */

import com.zll.parser.sym;
import com.zll.token.MySymbol;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14-6-7 下午2:07 from the specification file
 * <tt>/Users/lala/work/Java Project/IDEA/SimpleCUPJFlexCalculator/src/main/jflex/simpleC.flex</tt>
 */
public class ScannerC implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\1\1\1\1\0\2\1\22\0\1\1\1\66\3\0\1\70"+
    "\1\63\1\0\1\53\1\54\1\64\1\14\1\100\1\61\1\15\1\67"+
    "\1\5\7\6\2\4\1\76\1\77\1\71\1\72\1\62\1\75\1\0"+
    "\1\10\1\50\1\51\1\10\1\17\1\16\2\2\1\52\2\2\1\12"+
    "\3\2\1\13\4\2\1\11\2\2\1\7\2\2\1\57\1\0\1\60"+
    "\1\73\1\47\1\0\1\20\1\24\1\30\1\35\1\26\1\36\1\42"+
    "\1\32\1\34\1\2\1\27\1\37\1\40\1\33\1\23\1\46\1\2"+
    "\1\25\1\31\1\22\1\21\1\3\1\44\1\41\1\45\1\43\1\55"+
    "\1\74\1\56\1\65\uff81\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\2\4\1\5\1\6"+
    "\17\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\3"+
    "\1\4\1\35\1\36\2\0\1\37\1\0\1\40\1\41"+
    "\1\0\20\3\1\42\1\43\11\3\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\2\3\1\35"+
    "\1\36\1\65\1\36\1\0\1\37\1\66\1\67\2\0"+
    "\1\70\24\3\1\71\3\3\1\72\7\3\1\73\1\74"+
    "\1\75\1\3\1\66\1\67\1\76\1\0\1\77\7\3"+
    "\1\100\1\101\1\3\1\102\2\3\1\103\12\3\1\104"+
    "\1\105\5\3\1\76\1\3\1\106\1\3\1\107\5\3"+
    "\1\110\2\3\1\111\6\3\1\112\1\113\1\114\5\3"+
    "\1\115\2\3\1\116\1\3\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\125\5\3\1\126\3\3\1\127\2\3"+
    "\1\130\1\131\1\132\1\133\1\134\1\135\2\3\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\u05d7\0\u0618"+
    "\0\u0659\0\u069a\0\101\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\101\0\101\0\101\0\101\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\101\0\101"+
    "\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\202\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u10c2\0\u1103\0\u1144\0\101\0\101\0\101\0\u1185"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\101\0\u11c6"+
    "\0\101\0\101\0\101\0\101\0\101\0\u1207\0\u1248\0\101"+
    "\0\101\0\101\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce"+
    "\0\u140f\0\101\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\202\0\u1964"+
    "\0\u19a5\0\u19e6\0\202\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b"+
    "\0\u1b6c\0\u1bad\0\101\0\101\0\202\0\u1bee\0\101\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\202\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6"+
    "\0\u1e37\0\u1e78\0\202\0\202\0\u1eb9\0\202\0\u1efa\0\u1f3b"+
    "\0\202\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102"+
    "\0\u2143\0\u2184\0\u21c5\0\202\0\202\0\u2206\0\u2247\0\u2288"+
    "\0\u22c9\0\u230a\0\101\0\u234b\0\202\0\u238c\0\202\0\u23cd"+
    "\0\u240e\0\u244f\0\u2490\0\u24d1\0\202\0\u2512\0\u2553\0\202"+
    "\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\202\0\202"+
    "\0\202\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\202\0\u285f"+
    "\0\u28a0\0\202\0\u28e1\0\202\0\202\0\202\0\202\0\202"+
    "\0\202\0\202\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\202"+
    "\0\u2a67\0\u2aa8\0\u2ae9\0\202\0\u2b2a\0\u2b6b\0\202\0\202"+
    "\0\202\0\202\0\202\0\202\0\u2bac\0\u2bed\0\202";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\6\5\4"+
    "\1\10\1\11\2\4\1\12\1\13\1\14\1\4\1\15"+
    "\1\16\1\17\1\4\1\20\1\21\2\4\1\22\1\23"+
    "\1\24\1\25\2\4\1\26\1\4\1\27\2\4\1\30"+
    "\3\4\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\103\0"+
    "\12\4\2\0\35\4\30\0\12\4\2\0\5\4\1\57"+
    "\27\4\32\0\3\6\2\0\1\60\1\61\2\0\1\62"+
    "\1\0\1\63\1\0\1\60\4\0\1\63\10\0\1\61"+
    "\45\0\1\64\2\65\1\66\1\0\1\60\1\61\2\0"+
    "\1\62\1\0\1\63\1\0\1\60\4\0\1\63\10\0"+
    "\1\61\1\0\1\66\53\0\1\67\55\0\1\70\12\0"+
    "\3\62\6\0\1\71\65\0\12\4\2\0\3\4\1\72"+
    "\31\4\30\0\12\4\2\0\15\4\1\73\17\4\30\0"+
    "\12\4\2\0\27\4\1\74\5\4\30\0\12\4\2\0"+
    "\7\4\1\75\25\4\30\0\12\4\2\0\10\4\1\76"+
    "\24\4\30\0\12\4\2\0\15\4\1\77\3\4\1\100"+
    "\1\4\1\101\11\4\30\0\12\4\2\0\2\4\1\102"+
    "\2\4\1\103\6\4\1\104\20\4\30\0\12\4\2\0"+
    "\4\4\1\105\7\4\1\106\1\4\1\107\7\4\1\110"+
    "\6\4\30\0\12\4\2\0\15\4\1\111\2\4\1\112"+
    "\14\4\30\0\12\4\2\0\5\4\1\113\2\4\1\114"+
    "\24\4\30\0\12\4\2\0\5\4\1\115\13\4\1\116"+
    "\13\4\30\0\12\4\2\0\5\4\1\117\27\4\30\0"+
    "\12\4\2\0\5\4\1\120\27\4\30\0\12\4\2\0"+
    "\14\4\1\121\20\4\30\0\12\4\2\0\32\4\1\122"+
    "\1\123\1\124\107\0\1\125\1\126\7\0\1\127\70\0"+
    "\1\130\7\0\1\131\71\0\1\132\6\0\1\133\100\0"+
    "\1\134\100\0\1\135\100\0\1\136\100\0\1\137\77\0"+
    "\1\140\1\141\100\0\1\142\100\0\1\143\100\0\1\144"+
    "\1\0\1\145\6\0\12\4\2\0\16\4\1\146\2\4"+
    "\1\147\13\4\40\0\1\150\24\0\1\150\52\0\1\150"+
    "\7\0\1\150\63\0\3\62\3\0\1\151\3\0\1\152"+
    "\1\63\6\0\1\63\7\0\1\152\1\151\45\0\3\153"+
    "\5\0\1\154\44\0\1\154\23\0\3\64\6\0\1\62"+
    "\1\0\1\63\6\0\1\63\56\0\1\64\2\65\2\0"+
    "\1\155\1\156\2\0\1\62\1\0\1\63\1\0\1\155"+
    "\4\0\1\63\10\0\1\156\45\0\1\157\1\160\1\157"+
    "\1\0\1\157\4\0\1\161\3\157\3\0\1\157\1\0"+
    "\1\157\1\0\1\157\4\0\2\157\11\0\2\157\44\0"+
    "\1\162\65\0\12\4\2\0\4\4\1\163\30\4\30\0"+
    "\12\4\2\0\13\4\1\164\2\4\1\165\16\4\30\0"+
    "\12\4\2\0\30\4\1\166\4\4\30\0\12\4\2\0"+
    "\10\4\1\167\24\4\30\0\12\4\2\0\4\4\1\170"+
    "\6\4\1\171\10\4\1\172\10\4\30\0\12\4\2\0"+
    "\3\4\1\173\31\4\30\0\12\4\2\0\13\4\1\174"+
    "\21\4\30\0\12\4\2\0\4\4\1\175\30\4\30\0"+
    "\12\4\2\0\13\4\1\176\21\4\30\0\12\4\2\0"+
    "\15\4\1\177\17\4\30\0\12\4\2\0\2\4\1\200"+
    "\32\4\30\0\12\4\2\0\2\4\1\201\4\4\1\202"+
    "\25\4\30\0\12\4\2\0\5\4\1\203\27\4\30\0"+
    "\12\4\2\0\24\4\1\204\1\205\7\4\30\0\12\4"+
    "\2\0\16\4\1\206\16\4\30\0\12\4\2\0\4\4"+
    "\1\207\14\4\1\210\13\4\30\0\12\4\2\0\3\4"+
    "\1\211\31\4\30\0\12\4\2\0\20\4\1\212\14\4"+
    "\30\0\12\4\2\0\7\4\1\213\25\4\30\0\12\4"+
    "\2\0\5\4\1\214\27\4\30\0\12\4\2\0\15\4"+
    "\1\215\17\4\30\0\12\4\2\0\4\4\1\216\30\4"+
    "\30\0\12\4\2\0\16\4\1\217\16\4\30\0\12\4"+
    "\2\0\5\4\1\220\27\4\30\0\12\4\2\0\5\4"+
    "\1\221\27\4\30\0\12\4\2\0\22\4\1\222\12\4"+
    "\120\0\1\223\100\0\1\224\10\0\12\4\2\0\17\4"+
    "\1\225\15\4\30\0\12\4\2\0\2\4\1\226\32\4"+
    "\32\0\3\153\3\0\1\151\3\0\1\152\17\0\1\152"+
    "\1\151\45\0\3\153\104\0\1\227\24\0\1\227\52\0"+
    "\1\227\7\0\1\227\63\0\3\157\1\0\1\157\1\230"+
    "\1\231\1\63\1\0\1\232\3\157\1\230\2\0\1\157"+
    "\1\0\1\157\1\0\1\157\4\0\2\157\1\231\6\0"+
    "\1\63\1\0\2\157\33\0\3\160\1\0\1\160\2\0"+
    "\1\63\1\0\1\232\3\160\3\0\1\160\1\0\1\160"+
    "\1\0\1\160\4\0\2\160\7\0\1\63\1\0\2\160"+
    "\33\0\3\232\1\0\1\232\5\0\3\232\3\0\1\232"+
    "\1\0\1\232\1\0\1\232\4\0\2\232\11\0\2\232"+
    "\31\0\12\4\2\0\5\4\1\233\27\4\30\0\12\4"+
    "\2\0\16\4\1\234\16\4\30\0\12\4\2\0\5\4"+
    "\1\235\27\4\30\0\12\4\2\0\10\4\1\236\24\4"+
    "\30\0\12\4\2\0\2\4\1\237\32\4\30\0\12\4"+
    "\2\0\3\4\1\240\31\4\30\0\12\4\2\0\4\4"+
    "\1\241\30\4\30\0\12\4\2\0\16\4\1\242\16\4"+
    "\30\0\12\4\2\0\22\4\1\243\12\4\30\0\12\4"+
    "\2\0\10\4\1\244\24\4\30\0\12\4\2\0\10\4"+
    "\1\245\24\4\30\0\12\4\2\0\10\4\1\246\24\4"+
    "\30\0\12\4\2\0\4\4\1\247\6\4\1\250\21\4"+
    "\30\0\12\4\2\0\7\4\1\251\25\4\30\0\12\4"+
    "\2\0\4\4\1\252\30\4\30\0\12\4\2\0\3\4"+
    "\1\253\31\4\30\0\12\4\2\0\7\4\1\254\25\4"+
    "\30\0\12\4\2\0\15\4\1\255\17\4\30\0\12\4"+
    "\2\0\10\4\1\256\24\4\30\0\12\4\2\0\4\4"+
    "\1\257\30\4\30\0\12\4\2\0\16\4\1\260\16\4"+
    "\30\0\12\4\2\0\6\4\1\261\26\4\30\0\12\4"+
    "\2\0\2\4\1\262\32\4\30\0\12\4\2\0\2\4"+
    "\1\263\32\4\30\0\12\4\2\0\24\4\1\264\10\4"+
    "\30\0\12\4\2\0\5\4\1\265\27\4\30\0\12\4"+
    "\2\0\21\4\1\266\13\4\30\0\12\4\2\0\5\4"+
    "\1\267\27\4\30\0\12\4\2\0\22\4\1\270\12\4"+
    "\30\0\12\4\2\0\2\4\1\271\32\4\30\0\12\4"+
    "\2\0\4\4\1\272\30\4\40\0\1\273\24\0\1\273"+
    "\52\0\1\273\7\0\1\273\63\0\3\232\1\0\1\232"+
    "\2\0\1\63\2\0\3\232\3\0\1\232\1\0\1\232"+
    "\1\0\1\232\4\0\2\232\7\0\1\63\1\0\2\232"+
    "\31\0\12\4\2\0\24\4\1\274\10\4\30\0\12\4"+
    "\2\0\15\4\1\275\17\4\30\0\12\4\2\0\17\4"+
    "\1\276\15\4\30\0\12\4\2\0\11\4\1\277\23\4"+
    "\30\0\12\4\2\0\7\4\1\300\25\4\30\0\12\4"+
    "\2\0\7\4\1\301\25\4\30\0\12\4\2\0\13\4"+
    "\1\302\21\4\30\0\12\4\2\0\7\4\1\303\25\4"+
    "\30\0\12\4\2\0\16\4\1\304\16\4\30\0\12\4"+
    "\2\0\4\4\1\305\30\4\30\0\12\4\2\0\16\4"+
    "\1\306\16\4\30\0\12\4\2\0\12\4\1\307\22\4"+
    "\30\0\12\4\2\0\4\4\1\310\30\4\30\0\12\4"+
    "\2\0\10\4\1\311\24\4\30\0\12\4\2\0\5\4"+
    "\1\312\27\4\30\0\12\4\2\0\12\4\1\313\22\4"+
    "\30\0\12\4\2\0\15\4\1\314\17\4\30\0\12\4"+
    "\2\0\21\4\1\315\13\4\30\0\12\4\2\0\3\4"+
    "\1\316\31\4\30\0\12\4\2\0\4\4\1\317\30\4"+
    "\30\0\12\4\2\0\10\4\1\320\24\4\30\0\12\4"+
    "\2\0\21\4\1\321\13\4\30\0\12\4\2\0\30\4"+
    "\1\322\4\4\30\0\12\4\2\0\24\4\1\323\10\4"+
    "\30\0\12\4\2\0\16\4\1\324\16\4\30\0\12\4"+
    "\2\0\15\4\1\325\17\4\30\0\12\4\2\0\10\4"+
    "\1\326\24\4\30\0\12\4\2\0\15\4\1\327\17\4"+
    "\30\0\12\4\2\0\16\4\1\330\16\4\30\0\12\4"+
    "\2\0\4\4\1\331\30\4\30\0\12\4\2\0\15\4"+
    "\1\332\17\4\30\0\12\4\2\0\15\4\1\333\17\4"+
    "\30\0\12\4\2\0\12\4\1\334\22\4\30\0\12\4"+
    "\2\0\4\4\1\335\30\4\30\0\12\4\2\0\17\4"+
    "\1\336\15\4\30\0\12\4\2\0\20\4\1\337\14\4"+
    "\30\0\12\4\2\0\14\4\1\340\20\4\30\0\12\4"+
    "\2\0\10\4\1\341\24\4\30\0\12\4\2\0\10\4"+
    "\1\342\24\4\30\0\12\4\2\0\21\4\1\343\13\4"+
    "\30\0\12\4\2\0\21\4\1\344\13\4\30\0\12\4"+
    "\2\0\16\4\1\345\16\4\30\0\12\4\2\0\21\4"+
    "\1\346\13\4\30\0\12\4\2\0\10\4\1\347\24\4"+
    "\30\0\12\4\2\0\20\4\1\350\14\4\30\0\12\4"+
    "\2\0\12\4\1\351\22\4\30\0\12\4\2\0\10\4"+
    "\1\352\24\4\30\0\12\4\2\0\3\4\1\353\31\4"+
    "\30\0\12\4\2\0\4\4\1\354\30\4\30\0\12\4"+
    "\2\0\10\4\1\355\24\4\30\0\12\4\2\0\15\4"+
    "\1\356\17\4\30\0\12\4\2\0\10\4\1\357\24\4"+
    "\30\0\12\4\2\0\17\4\1\360\15\4\30\0\12\4"+
    "\2\0\4\4\1\361\30\4\30\0\12\4\2\0\7\4"+
    "\1\362\25\4\30\0\12\4\2\0\10\4\1\363\24\4"+
    "\30\0\12\4\2\0\23\4\1\364\11\4\30\0\12\4"+
    "\2\0\2\4\1\365\32\4\30\0\12\4\2\0\7\4"+
    "\1\366\25\4\30\0\12\4\2\0\27\4\1\367\5\4"+
    "\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11310];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\25\1\6\11\4\1\1\11\7\1\4\11"+
    "\4\1\2\0\1\1\1\0\2\11\1\0\33\1\3\11"+
    "\1\1\7\11\1\1\5\11\2\1\3\11\1\1\1\0"+
    "\3\1\2\0\1\11\40\1\2\11\2\1\1\11\2\1"+
    "\1\0\40\1\1\11\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new MySymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new MySymbol(type, yyline+1, yycolumn+1, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerC(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScannerC(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }
    }

	// numRead < 0
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40:
          { return symbol(GTEQ);
          }
        case 95: break;
        case 14:
          { return symbol(GT);
          }
        case 96: break;
        case 44:
          { return symbol(NOTEQ);
          }
        case 97: break;
        case 70:
          { return symbol(UNION);
          }
        case 98: break;
        case 81:
          { return symbol(SIGNED);
          }
        case 99: break;
        case 9:
          { return symbol(LBRACE);
          }
        case 100: break;
        case 92:
          { return symbol(CONTINUE);
          }
        case 101: break;
        case 90:
          { return symbol(RESTRICT);
          }
        case 102: break;
        case 79:
          { return symbol(STATIC);
          }
        case 103: break;
        case 35:
          { return symbol(DO);
          }
        case 104: break;
        case 32:
          { return symbol(PLUSPLUS);
          }
        case 105: break;
        case 88:
          { return symbol(VOLATILE);
          }
        case 106: break;
        case 21:
          { return symbol(LT);
          }
        case 107: break;
        case 46:
          { return symbol(MOD_ASSGN);
          }
        case 108: break;
        case 23:
          { return symbol(BIT_XOR);
          }
        case 109: break;
        case 56:
          { return symbol(ELLIPSIS);
          }
        case 110: break;
        case 60:
          { return symbol(LSHIFT_ASSGN);
          }
        case 111: break;
        case 59:
          { return symbol(RSHIFT_ASSGN);
          }
        case 112: break;
        case 25:
          { return symbol(QMARK);
          }
        case 113: break;
        case 73:
          { return symbol(SHORT);
          }
        case 114: break;
        case 42:
          { return symbol(BITAND_ASSGN);
          }
        case 115: break;
        case 4:
          { return symbol(INTEGER_LITERAL, Integer.valueOf(yytext().replaceAll("[uU]",""),10));
          }
        case 116: break;
        case 22:
          { return symbol(ASSGN);
          }
        case 117: break;
        case 30:
          { return symbol(FLOATING_POINT_LITERAL, Double.valueOf(yytext().replaceAll("[lL]","")));
          }
        case 118: break;
        case 68:
          { return symbol(LONG);
          }
        case 119: break;
        case 52:
          { return symbol(OR);
          }
        case 120: break;
        case 5:
          { return symbol(PLUS);
          }
        case 121: break;
        case 76:
          { return symbol(_BOOL);
          }
        case 122: break;
        case 8:
          { return symbol(RPAREN);
          }
        case 123: break;
        case 72:
          { return symbol(CONST);
          }
        case 124: break;
        case 63:
          { return symbol(AUTO);
          }
        case 125: break;
        case 39:
          { return symbol(RSHIFT);
          }
        case 126: break;
        case 51:
          { return symbol(BITOR_ASSGN);
          }
        case 127: break;
        case 1:
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+(yyline+1)+", column "+(yycolumn+1));
          }
        case 128: break;
        case 64:
          { return symbol(ENUM);
          }
        case 129: break;
        case 43:
          { return symbol(MULT_ASSGN);
          }
        case 130: break;
        case 58:
          { return symbol(FOR);
          }
        case 131: break;
        case 69:
          { return symbol(GOTO);
          }
        case 132: break;
        case 84:
          { return symbol(INLINE);
          }
        case 133: break;
        case 50:
          { return symbol(BITXOR_ASSGN);
          }
        case 134: break;
        case 55:
          { return symbol(INTEGER_LITERAL, Integer.valueOf(yytext().replaceAll("[uU]","").substring(2),16));
          }
        case 135: break;
        case 17:
          { return symbol(BIT_COMPL);
          }
        case 136: break;
        case 94:
          { return symbol(_IMAGINARY);
          }
        case 137: break;
        case 93:
          { return symbol(_COMPLEX);
          }
        case 138: break;
        case 87:
          { return symbol(DEFAULT);
          }
        case 139: break;
        case 19:
          { return symbol(DIV);
          }
        case 140: break;
        case 85:
          { return symbol(DOUBLE);
          }
        case 141: break;
        case 34:
          { return symbol(IF);
          }
        case 142: break;
        case 67:
          { return symbol(CHAR);
          }
        case 143: break;
        case 3:
          { return symbol(IDENTIFIER, yytext());
          }
        case 144: break;
        case 83:
          { return symbol(SWITCH);
          }
        case 145: break;
        case 20:
          { return symbol(MOD);
          }
        case 146: break;
        case 7:
          { return symbol(LPAREN);
          }
        case 147: break;
        case 47:
          { return symbol(LSHIFT);
          }
        case 148: break;
        case 71:
          { return symbol(BREAK);
          }
        case 149: break;
        case 78:
          { return symbol(EXTERN);
          }
        case 150: break;
        case 37:
          { return symbol(INDIR_SEL);
          }
        case 151: break;
        case 33:
          { return symbol(ADD_ASSGN);
          }
        case 152: break;
        case 86:
          { return symbol(TYPEDEF);
          }
        case 153: break;
        case 12:
          { return symbol(RBRACK);
          }
        case 154: break;
        case 27:
          { return symbol(SEMICOLON);
          }
        case 155: break;
        case 38:
          { return symbol(SUB_ASSGN);
          }
        case 156: break;
        case 24:
          { return symbol(BIT_OR);
          }
        case 157: break;
        case 36:
          { return symbol(DECREMENT);
          }
        case 158: break;
        case 74:
          { return symbol(FLOAT);
          }
        case 159: break;
        case 66:
          { return symbol(CASE);
          }
        case 160: break;
        case 13:
          { return symbol(MINUS);
          }
        case 161: break;
        case 15:
          { return symbol(AMPER);
          }
        case 162: break;
        case 6:
          { return symbol(DOT);
          }
        case 163: break;
        case 91:
          { return symbol(REGISTER);
          }
        case 164: break;
        case 49:
          { return symbol(EQUAL);
          }
        case 165: break;
        case 29:
          { return symbol(INTEGER_LITERAL, Long.valueOf(yytext().replaceAll("[uUlL]","").substring(0),10));
          }
        case 166: break;
        case 31:
          { return symbol(INTEGER_LITERAL, Integer.valueOf(yytext().replaceAll("[uU]","").substring(1),8));
          }
        case 167: break;
        case 57:
          { return symbol(INT);
          }
        case 168: break;
        case 16:
          { return symbol(STAR);
          }
        case 169: break;
        case 41:
          { return symbol(AND);
          }
        case 170: break;
        case 26:
          { return symbol(COLON);
          }
        case 171: break;
        case 48:
          { return symbol(LTEQ);
          }
        case 172: break;
        case 62:
          { return symbol(INTEGER_LITERAL, Long.valueOf(yytext().replaceAll("[uUlL]","").substring(2),16));
          }
        case 173: break;
        case 89:
          { return symbol(UNSIGNED);
          }
        case 174: break;
        case 82:
          { return symbol(SIZEOF);
          }
        case 175: break;
        case 53:
          { return symbol(FLOATING_POINT_LITERAL, Float.valueOf(yytext()));
          }
        case 176: break;
        case 61:
          { return symbol(VOID);
          }
        case 177: break;
        case 18:
          { return symbol(NOT);
          }
        case 178: break;
        case 10:
          { return symbol(RBRACE);
          }
        case 179: break;
        case 2:
          { /* ignore */
          }
        case 180: break;
        case 45:
          { return symbol(DIV_ASSGN);
          }
        case 181: break;
        case 11:
          { return symbol(LBRACK);
          }
        case 182: break;
        case 80:
          { return symbol(STRUCT);
          }
        case 183: break;
        case 75:
          { return symbol(WHILE);
          }
        case 184: break;
        case 54:
          { return symbol(INTEGER_LITERAL, Long.valueOf(yytext().replaceAll("[uUlL]","").substring(1),8));
          }
        case 185: break;
        case 65:
          { return symbol(ELSE);
          }
        case 186: break;
        case 28:
          { return symbol(COMMA);
          }
        case 187: break;
        case 77:
          { return symbol(RETURN);
          }
        case 188: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ScannerC <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        ScannerC scanner = null;
        try {
          scanner = new ScannerC( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
