
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 14 20:50:45 CST 2014
//----------------------------------------------------

package com.zll.main;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.lr_parser;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 14 20:50:45 CST 2014
  */
public class Parser extends lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\005\002\000\002\003\005\000\002\004\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\020\000\006\007\010\011\005\001\002\000\010\002" +
    "\uffff\007\uffff\011\uffff\001\002\000\012\004\ufffc\005\ufffc" +
    "\006\ufffc\010\ufffc\001\002\000\010\002\022\007\010\011" +
    "\005\001\002\000\010\004\ufffe\005\013\006\014\001\002" +
    "\000\006\007\010\011\005\001\002\000\010\005\013\006" +
    "\014\010\012\001\002\000\012\004\ufff9\005\ufff9\006\ufff9" +
    "\010\ufff9\001\002\000\006\007\010\011\005\001\002\000" +
    "\006\007\010\011\005\001\002\000\012\004\ufffa\005\ufffa" +
    "\006\ufffa\010\ufffa\001\002\000\012\004\ufffb\005\ufffb\006" +
    "\014\010\ufffb\001\002\000\004\004\020\001\002\000\010" +
    "\002\ufffd\007\ufffd\011\ufffd\001\002\000\010\002\001\007" +
    "\001\011\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\020\000\010\002\005\003\003\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\020\004\006" +
    "\001\001\000\004\005\016\001\001\000\004\004\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\015" +
    "\001\001\000\004\004\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        protected List<Integer> results = new ArrayList<Integer>();

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new ComplexSymbolFactory();
		if (args.length==0) new Parser(new Scanner(System.in,sf),sf).parse();
		else new Parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}

        public static List<Integer> getResults(InputStream iStream) throws Exception {
		SymbolFactory sf = new ComplexSymbolFactory();
		Parser p = new Parser(new Scanner(iStream,sf),sf);
		
		Symbol s = p.parse();
                
                return p.results;
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= LPAREN expr RPAREN
            {
              Integer RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr TIMES expr
            {
              Integer RESULT =null;
		int lleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer l = (Integer)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((Symbol)CUP$Parser$stack.peek()).right;
		Integer r = (Integer)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Integer(l.intValue() * r.intValue());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS expr
            {
              Integer RESULT =null;
		int lleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer l = (Integer)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((Symbol)CUP$Parser$stack.peek()).right;
		Integer r = (Integer)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Integer(l.intValue() + r.intValue());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= NUMBER
            {
              Integer RESULT =null;
		int nleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=n;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= expr NT$0 SEMI
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e = (Integer)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::=
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((Symbol) CUP$Parser$stack.peek()).value;
 this.parser.results.add(e); System.out.println(" = "+e+";");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",3, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

